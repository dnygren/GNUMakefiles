################################################################################
# GNUmakefile : GNU makefile for payload_agent.cpp
#
# Created by: Dan Nygren
# Email: dan.nygren@gmail.com
#
#   Makefile for a program acts as a payload agent for ASI's MAX.
#
# CALLING SEQUENCE      make [target]
#
# EXAMPLES              make (The same as "make all")
#                       make all (Combination of make release & make debug)
#                       make clean  (Deletes all targets)
#                       make remake (Combination of make clean & make all)
#                       make release (Make release executable code)
#                       make debug (Make debug executable code)
#                       make dist (Make a distribution file)
#                       make install (Copies payload_agent to where it is used)
#                       make systemd (Enables and starts systemd service)
#                       make uninstall (stops & disables systemd & uninstalls)
#                       make lint (Perform static code analysis)
#                       make file.PRE (Run preprocessor on source files)
#
# TARGET SYSTEM         Linux
#
# DEVELOPMENT SYSTEM    Linux, GNU make
#
# CALLS                 g++, cppcheck
#
# CALLED BY             N/A
#
# INPUTS                C/C++ source files
#
# OUTPUTS               Executable file
#
# RETURNS               Not Applicable
#
# ERROR HANDLING        If there is an error in a rule, make gives up on the
#                       current rule.
#
# WARNINGS              1. "make lint" invokes cppcheck, not lint.
#                      (2. Describe anything a maintainer should be aware of)
#                      (N. Describe anything a maintainer should be aware of)
#
################################################################################

# Where is the base directory from here?
BASE := ..

# Source file suffix used (.c for C language, .cc or .cpp for C++)
#SUFX := .c
#SUFX := .cc
SUFX := .cpp

#
# Project files
#
SRCS := payload_agent.cpp msss_essage.cpp
EXE  := payload_agent

#
# Files from $(BASE)/Common/C++ directory
#
#COMSRCS := version.cc
COMSRCS := version.cpp

#
# Compiler
#
X86_C++  := /usr/bin/x86_64-linux-gnu-g++-6
ARM_C++  := /usr/bin/arm-linux-gnueabihf-g++-6
# Set compiler to one of the above options
C++ := $(ARM_C++)
#C++ := $(X86_C++)
#C++ := /usr/bin/g++

# Enter the xz compressed tarball filename to be created by "make dist"
DIST_TXZ := payload_agent_dist.tar.xz

# Enter the xz compressed tarball filename to be unpacked by "make install"
TXZ := payload_agent.tar.xz
# Installation directory
INSTDIR := /opt/payload_agent

#
# Project Directories
#
RELDIR := release
DBGDIR := debug
COMDIR := $(BASE)/Common/C++
# Location of test scripts
TSTDIR := Test_Apps
# Location of example child payload program
# (Chose debug version as most appropriate child_payload program to test with.)
CHILDPAYLOAD := ../child_payload/debug/child_payload

# Use release or debug executable?
EXEDIR := $(RELDIR)
# EXEDIR := $(DBGDIR)

# Executable
EXE := payload_agent

# Name of the system login
LOGIN := payload_agent

# Name of the systemd service unit configuration file
SERVICE := payload_agent.service

# Name of any additional groups associated with the service.
# The flag is included to avoid an error if there are no additional groups.
# The uucp group is needed to access "/dev/ttyXXX" on the Zedboard and Rincon
# Astro SDR.
#GROUPS := --groups uucp
# The Raspberry Pi uses the dialout group to access "/dev/ttyXXX"
#GROUPS := --groups dialout
# Add this group in order to access the socket file created by MAX.
GROUPS := --groups max
# You can separate multiple groups with a comma, but you will get an error if
# both groups do not exist. Usually the uucp OR dialout group exists, not both.
#GROUPS := --groups uucp,dialout

# If the STAGEDIR variable is undefined (the empty string) it has no effect.
# When it is defined, it causes installations to be staged to temporary
# directories for testing or before manually moving them to their final place.
# Staged installations do not enable or start a service.
#STAGEDIR := ./tmp_staged
STAGEDIR :=

# If executed outside of a git repository or without git being installed,
# what the GIT_COMMIT is set to when compiling the print version function.
# A maximum of 16 hex digits is allowed for a uint64_t.
# ABSENT_GIT_COMMIT := 012345678ABCDEF0
# Hex words for "Decoded Git Dead"
ABSENT_GIT_COMMIT := DEC0DED617DEAD

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# ^^^^^^^^^^ Place code that may need modification above this point. ^^^^^^^^^^
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# It is a good practice to always explicitly state which shell make uses
SHELL := /bin/sh

# tar create options
TARCOPTIONS := --create
TARCOPTIONS += --auto-compress
TARCOPTIONS += --verbose
TARCOPTIONS += --preserve-permissions
TARCOPTIONS += --file

# tar extract options
TARXOPTIONS := --extract
TARXOPTIONS += --auto-compress
TARXOPTIONS += --verbose
TARXOPTIONS += --preserve-permissions
# TARXOPTIONS += --strip-components=1

# Mode that the installed directories can be set to.
# User read, write, and aXcess the directory
# Group read and aXcess the directory
# Others read the directory
DIRMODE := u=rwx,g=rx,o=r

# Mode that the installed files can be set to.
# User read and write the file
# Group read the file
# Others read the file
FILEMODE := u=rw,g=r,o=r

# Location of files destined for target installation directory
TARGET_FILES := ./$(RELDIR)
TARGET_FILES += ./$(DBGDIR)
TARGET_FILES += ./$(TSTDIR)

# Full path to executable
EXECUTABLE := $(INSTDIR)/$(EXEDIR)/$(EXE)

# Object file prefixes are the same as the source files
OBJS := $(SRCS:$(SUFX)=.o)

#(uses "=" for recursively expanded variable)
EXECMDLINEDEFS = -DInst_Dir=\"$(INSTDIR)\"
EXECMDLINEDEFS += -DTest_Apps=\"$(TSTDIR)\"

COMCMDLINEDEFS     = -DBuilder=\"$(BUILDER)\"
#
# Version tracking
#
# Use target specific variables here so these commands are run only when
# release or debug builds are made. This way if a make install or uninstall
# is requested on a system without git, we don't get an error message.
release debug: BUILDER      := $(shell /usr/bin/id -un | /usr/bin/cut -c1-8)
release debug: EPOCH        := $(shell /bin/date +%s)
# If git exists and is executable AND we're making in a git repository,
# set GIT_COMMIT to the git commit, otherwise set it to ABSENT_GIT_COMMIT
# so this GIT_COMMIT variable doesn't cause an error when making outside git.
release debug: GIT_COMMIT   := 0x$(shell \
if $$([ -x /usr/bin/git ] && \
/usr/bin/git rev-parse --git-dir > /dev/null 2>&1); \
then echo $$(/usr/bin/git rev-parse --short=16 HEAD); \
else echo $(ABSENT_GIT_COMMIT); fi)
# SERIALNO        = 3 # Not needed for most SW
# Common directory command line defines
#(uses "=" for recursively expanded variable)
COMCMDLINEDEFS     = -DBuilder=\"$(BUILDER)\"
#COMCMDLINEDEFS     += -DSerialNo=$(SerialNo)
COMCMDLINEDEFS     += -DEpoch=$(EPOCH)
COMCMDLINEDEFS     += -DCommit=$(GIT_COMMIT)

#
# Compiler options
#
# The plan is to enable every warning reasonably possible, and make them errors
# so they get fixed in the source code and not waived or ignored.
#
# -Wall         -> Enable all warnings
# -Werror       -> Make warnings errors
# -Wextra       -> Add some extra warnings not added by -Wall
# -iquote dir   -> Add search for header files listed in the form
#                  #include "file" in these directories
# -MMD          -> Ask the C pre-processor to write make rules to dependency
#                  file(s) (.d for dependency extension) so #included local
#                  header file dependencies don't have to be manually written.
#                  This works in tandem with the following line in between
#                  object and executable generation:
#                  -include $(XXXOBJS:.o=.d)
#                  -MMD omits system headers from the generated dependencies.
#                  Use -MD to also preserve system headers as prerequisites.
# -MP           -> This option instructs CPP to add a phony target for each
#                  dependency other than the main file, causing each to depend
#                  on nothing. These dummy rules work around errors that make
#                  gives if you remove previously #included header files.
C++OPTIONS      :=  -std=gnu++14
C++OPTIONS      += -Wall
C++OPTIONS      += -Werror
C++OPTIONS      += -Wextra
C++OPTIONS      += -iquote ./Include
C++OPTIONS      += -iquote $(BASE)/Common/C++/Include
C++OPTIONS      += -MMD
C++OPTIONS      += -MP
# i2c-dev is a header only package, therefore there is no library to link to.
#C++OPTIONS      += `pkg-config --cflags --libs libi2c` // N/A per above

#
# Lint
#
LINT            := /usr/bin/cppcheck
#
# Lint options / includes
#
LINTOPTIONS     :=  --verbose
LINTOPTIONS     += --enable=all
LINTOPTIONS     += --suppress=missingIncludeSystem

LINTCHECKCONFIG :=  --check-config
LINTCHECKCONFIG += --suppress=missingIncludeSystem

LINTINCLUDES    :=  -I ./Include
LINTINCLUDES    += -I $(BASE)/Common/C++/Include

#
# Release build settings
#
RELEXE := $(RELDIR)/$(EXE)
RELOBJS := $(addprefix $(RELDIR)/, $(OBJS))
RELCOMMONOBJS := $(addprefix $(COMDIR)/$(RELDIR)/, $(COMSRCS:$(SUFX)=.o))
#
# Release compiler options
#
# -DNDEBUG  -> compiles "#ifdef NDEBUG" code
# -O3       -> Optimize executable to a very high level
RELC++OPTIONS := -DNDEBUG
RELC++OPTIONS += -O3

#
# Debug build settings
#
DBGEXE := $(DBGDIR)/$(EXE)
DBGOBJS := $(addprefix $(DBGDIR)/, $(OBJS))
DBGCOMMONOBJS := $(addprefix $(COMDIR)/$(DBGDIR)/, $(COMSRCS:$(SUFX)=.o))
#
# Debug compiler options
#
# -ggdb     -> Produce debugging information for use by the GNU Debugger (GDB)
# -DDEBUG   -> compiles "#ifdef DEBUG" code
# -Og       -> Enable optimizations that do not interfere with debugging.
DBGC++OPTIONS :=  -ggdb
DBGC++OPTIONS += -DDEBUG
DBGC++OPTIONS += -Og

#
# ARM gcc/g++ compiler options
#
# Automatic vectorization can generate code targeted for NEON from ordinary
# source code so less effort to is required produce efficient code. Code
# becomes portable as no compiler specific source code features need to be used.
#
# To enable automatic vectorization on gcc/g++, use these options together:
# -mcpu=cortex-a9   -> Specify ARMv7-A processor
# -mfpu=neon        -> enable NEON support
# -mfloat-abi=hard  -> if set to "softfp" (but not "soft") this allows the
#                      generation of code using hardware floating-point
#                      instructions, but still uses the soft-float calling
#                      conventions, so all code doesn't need to be re-compiled.
# -ftree-vectorize  -> Support SIMD on many arch (-O3 implies)
# -ftree-vectorize-verbose=1  -> Takes an integer value specifying the level
#                      of detail to provide, where 1 enables additional
#                      printouts and higher values add even more information.
#                      Indicates what vectorization the compiler is
#                      performing, or what it is unable to perform because of
#                      possible dependencies.
ARM_OPTIONS := -mcpu=cortex-a9
ARM_OPTIONS += -mfpu=neon
# Commented out because "softfp" caused a compiler error and concern that "hard"
# would cause some link problems. As such, just use whatever the default is.
#ARM_OPTIONS += -mfloat-abi=hard
ARM_OPTIONS += -ftree-vectorize
ARM_OPTIONS += -ftree-vectorizer-verbose=1
# If the ARM compiler is being used, use the ARM compiler options on both
# release and debug code.
ifeq ($(C++),$(ARM_C++))
    RELC++OPTIONS += $(ARM_OPTIONS)
    DBGC++OPTIONS += $(ARM_OPTIONS)
endif

#
# Rules
#

# ### Rule to make release and debug executable and object files ###
.PHONY: all
all: release debug

# ### Rule to make release object and executable files ###
# Automatic variables:
# $^ Space delimited names of all the prerequisites
# $@ File name of the target of the rule
# $< Name of the first prerequisite
# #### Automatically detect changes in included files
# As all the object files are listed with $(XXXOBJS) and the C pre-processor
# is set to add rules to a dependency file (by adding -MMD -MP to the compiler
# flags/options), the following line pulls in these dependencies:
#-include $(XXXOBJS:.o=.d)
release: $(RELEXE)

$(RELEXE): $(RELOBJS) $(RELCOMMONOBJS)
	$(C++) $(C++OPTIONS) $(RELC++OPTIONS) $(EXECMDLINEDEFS) -o $(RELEXE) $^

-include $(RELOBJS:.o=.d)

$(RELDIR)/%.o: %$(SUFX)
	/bin/mkdir -p $(RELDIR)
	$(C++) -c $(C++OPTIONS) $(RELC++OPTIONS) $(EXECMDLINEDEFS) -o $@ $<

$(BASE)/Common/C++/$(RELDIR)/%.o: $(BASE)/Common/C++/%$(SUFX)
	/bin/mkdir -p  $(BASE)/Common/C++/$(RELDIR)
	$(C++) -c $(C++OPTIONS) $(RELC++OPTIONS) $(COMCMDLINEDEFS) -o $@ $<

# ### Rule to make debug object and executable files ###
# Automatic variables:
# $^ Space delimited names of all the prerequisites
# $@ File name of the target of the rule
# $< Name of the first prerequisite
# #### Automatically detect changes in included files
# As all the object files are listed with $(XXXOBJS) and the C pre-processor
# is set to add rules to a dependency file (by adding -MMD -MP to the compiler
# flags/options), the following line pulls in these dependencies:
#-include $(XXXOBJS:.o=.d)
debug: $(DBGEXE)

$(DBGEXE): $(DBGOBJS) $(DBGCOMMONOBJS)
	$(C++) $(C++OPTIONS) $(DBGC++OPTIONS) $(EXECMDLINEDEFS) -o $(DBGEXE) $^

-include $(DBGOBJS:.o=.d)

$(DBGDIR)/%.o: %$(SUFX)
	/bin/mkdir -p $(DBGDIR)
	$(C++) -c $(C++OPTIONS) $(DBGC++OPTIONS) $(EXECMDLINEDEFS) -o $@ $<

$(BASE)/Common/C++/$(DBGDIR)/%.o: $(BASE)/Common/C++/%$(SUFX)
	/bin/mkdir -p  $(BASE)/Common/C++/$(DBGDIR)
	$(C++) -c $(C++OPTIONS) $(DBGC++OPTIONS) $(COMCMDLINEDEFS) -o $@ $<

#
# Other rules
#

# ### Rule to clean out executable, object, dependency *.PRE and dist files ###
# The "-" at the beginning of the command tells GNU make ignore errors like
# file not present etc. There is no need to delete parent directories that
# were created with "mkdir -p", since they could have existed anyway.
.PHONY: clean
clean:
	-/bin/rm -f $(RELEXE) $(RELOBJS) $(RELDIR)/*.d $(DBGEXE) $(DBGOBJS) \
$(DBGDIR)/*.d $(RELCOMMONOBJS) $(DBGCOMMONOBJS) *.PRE $(DIST_TXZ) $(TXZ)

# ### Rule to perform static code analysis ###
.PHONY: lint
lint:
	$(LINT) $(LINTCHECKCONFIG) $(LINTINCLUDES) $(SRCS)
	@echo
	$(LINT) $(LINTOPTIONS) $(LINTINCLUDES) $(SRCS)

# ### Rule to clean and then re-make ###
.PHONY: remake
remake: clean all

# #### Rule to only run the preprocessor on a source file
# Useful for checking / debugging macros
# Using the GNU Compiler -E option, nothing happens except preprocessing.
# Example: $ make file.PRE
# The above will create the preprocessed file.PRE from the source file.
.PHONY: file.PRE
%.PRE : %$(SUFX)
	$(C++) $(LINTINCLUDES) -E $< -o $@

.PHONY: dist
dist:
# Copy the example child payload program to the test applications directory
	/bin/cp $(CHILDPAYLOAD) $(TSTDIR)
# Create an xz compressed runtime payload_agent files tarball
	/bin/tar --exclude='*.o' --exclude='*.d' \
            $(TARCOPTIONS) $(TXZ) $(RELDIR) $(DBGDIR) $(TSTDIR)
# Wrap the runtime tarball, GNUmakefile, systemd service unit configuration
# file, and README.md into an xz compressed distribution tar file.
	/bin/tar $(TARCOPTIONS) $(DIST_TXZ) \
            $(TXZ) GNUmakefile payload_agent.service README

.PHONY: uninstall
uninstall:
# Note that ifeq ($(STAGEDIR),) tests for an empty value of $(STAGEDIR) whereas
# ifdef($(STAGEDIR)) would just test if the $(STAGEDIR) was ever defined.
ifeq ($(STAGEDIR),)
# The dashes in front of the stop and disable allow the makefile to continue
# with the -f forced removes in case the service never started.
	-/bin/systemctl stop $(SERVICE)
	-/bin/systemctl disable $(SERVICE)
	/bin/rm -f /etc/systemd/system/$(SERVICE)
# If payload_agent has not been stopped by systemd, ensure payload_agent is
# no longer running.
	-/usr/bin/pkill $(EXE)
# Remove all directories with installation directory prefix.
	/bin/rm -rf $(INSTDIR)
# Remove login
	-/usr/sbin/userdel $(LOGIN)
else
	/bin/rm -rf $(STAGEDIR)
endif

.PHONY: install
install:
# Ensure the installation is not going to occur on top of a running
# payload_agent.
	-/usr/bin/pkill $(EXE)
# Create a group with the same name as the login
	/usr/sbin/groupadd -f $(LOGIN)
# Create a system login in a group of the same name plus additional groups
	-/usr/sbin/useradd --system --gid $(LOGIN) $(GROUPS) $(LOGIN)
# Set owner and group of directory to the system login
	/usr/bin/install --mode $(DIRMODE) --owner=$(LOGIN) --group=$(LOGIN) \
--directory $(STAGEDIR)$(INSTDIR)
# Install files and set owner and group to the system login
	/bin/tar $(TARXOPTIONS) --directory=$(STAGEDIR)$(INSTDIR) \
--file=$(TXZ)
	/bin/chown --recursive $(LOGIN) $(STAGEDIR)$(INSTDIR)
	/bin/chgrp --recursive $(LOGIN) $(STAGEDIR)$(INSTDIR)

.PHONY: systemd
ifeq ($(STAGEDIR),)
# If no staging directory defined, set the systemd service to enable and start.
ENABLESERVICE := /bin/systemctl enable $(SERVICE)
STARTSERVICE := /bin/systemctl start $(SERVICE)
else
# Else just pretend to have enabled and started the systemd service.
ENABLESERVICE := true
STARTSERVICE := true
endif

systemd:
# Test if systemd-run (used to create and start a service) exists and is
# non-zero in size. If so, install the service.
	/usr/bin/test -s /usr/bin/systemd-run && \
/usr/bin/install -m $(DIRMODE) -d $(STAGEDIR)/etc/systemd/system && \
/usr/bin/install -m $(FILEMODE) $(SERVICE) $(STAGEDIR)/etc/systemd/system && \
$(ENABLESERVICE)
# /usr/bin/install -m $(FILEMODE) $(SERVICE) $(STAGEDIR)/etc/systemd/system && \
# $(ENABLESERVICE) && $(STARTSERVICE)
	@echo "*** The systemd $(SERVICE) requires another service. ***"
	@echo "*** Therefore $(SERVICE) is enabled but not started here. ***"
